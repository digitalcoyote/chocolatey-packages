<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <id>bazelisk</id>
    <version>1.26.0</version>
    <packageSourceUrl>https://github.com/digitalcoyote/chocolatey-packages/tree/master/bazelisk</packageSourceUrl>
    <owners>CodingCoyote</owners>
    <title>Bazelisk</title>
    <authors>bazelbuild</authors>
    <projectUrl>https://github.com/bazelbuild/bazelisk</projectUrl>
    <!-- <iconUrl></iconUrl> -->
    <licenseUrl>https://github.com/bazelbuild/bazelisk/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/bazelbuild/bazelisk</projectSourceUrl>
    <docsUrl>https://github.com/bazelbuild/bazelisk/blob/master/README.md</docsUrl>
    <bugTrackerUrl>https://github.com/bazelbuild/bazelisk/issues</bugTrackerUrl>
    <tags>bazelisk bazel build</tags>
    <summary>A user-friendly launcher for Bazel</summary>
    <description># What is Bazelisk
## About Bazelisk

Bazelisk is a wrapper for Bazel written in Go.
It automatically picks a good version of Bazel given your current working directory, downloads it from the official server (if required) and then transparently passes through all command-line arguments to the real Bazel binary.
You can call it just like you would call Bazel.

Some ideas how to use it:
- Install it as the `bazel` binary in your PATH (e.g. /usr/local/bin).
  Never worry about upgrading Bazel to the latest version again.
- Check it into your repository and recommend users to build your software via `./bazelisk build //my:software`.
  That way, even someone who has never used Bazel or doesn't have it installed can build your software.
- As a company using Bazel or as a project owner, add a `.bazelversion` file to your repository.
  This will tell Bazelisk to use the exact version specified in the file when running in your workspace.
  The fact that it's versioned inside your repository will then allow for atomic upgrades of Bazel including all necessary changes.
  If you install Bazelisk as `bazel` on your CI machines, too, you can even test Bazel upgrades via a normal presubmit / pull request.
  It will also ensure that users will not try to build your project with an incompatible version of Bazel, which is often a cause for frustration and failing builds.

Before Bazelisk was rewritten in Go, it was a Python script.
This still works and has the advantage that you can run it on any platform that has a Python interpreter, but is currently unmaintained and it doesn't support as many features.
The documentation below describes the newer Go version only.

## Where does Bazelisk get Bazel from?

By default Bazelisk retrieves the list of Bazel versions from the Bazel GitHub project. If this fails, Bazelisk queries the official Bazel release server instead.
In both cases the actual binaries are downloaded from the release server.

## Why is my Virus Scanner saying this is malware
[Official Go Docs](https://golang.org/doc/faq#virus) indicate this is a common problem and is being specifically reviewed for Bazelisk in [Issue #168](https://github.com/bazelbuild/bazelisk/issues/168)</description>
<releaseNotes>https://github.com/bazelbuild/bazelisk/releases/</releaseNotes>
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
